from rules import *
from methods import *

def fn_whoisalive(connection_data, command, values):
    with connection_data.cursor() as cursor:
        cursor.execute(command[0], [values[0]])  # get room number
        room_number = cursor.fetchone()[0]

        cursor.execute(
            command[1].format(f'room{room_number}'))  # get number of players in the room and select active_roles
        scenario = get_active_roles(cursor.fetchone()[0])

        role = values[1]
        is_alive = lambda next_role: \
        (cursor.execute(command[4].format(f'room{room_number}'), [next_role]), cursor.fetchone()[0])[
            1]  # function that checks is_alive by user_role

        def get_user_buttons_and_list():  # 0 players, 1 players_buttons, 2 players_list
            cursor.execute(command[5].format(f'room{room_number}'))
            players = [str(u[0]) for u in cursor.fetchall()]
            players_buttons = [p.split()[-1] for p in players]
            random.shuffle(players_buttons)

            players_list = ""

            random.shuffle(players)
            for i, p in enumerate(players):
                players_list += f"{i + 1}) {p}\n"

            return [players, players_buttons, players_list]

        try:
            for i, r in enumerate(scenario):
                if r == role:
                    next_role = scenario[i + 1]
                    if len(scenario) >= 6 and role == '–î–æ–Ω' and is_alive(role) == 1:
                        role = scenario[i + 1]
                    elif len(scenario) >= 5 and role == '–ö–æ–º–∏—Å—Å–∞—Ä' and is_alive(role) == 1:
                        role = scenario[i + 1]
                    elif is_alive(next_role) == 1:
                        cursor.execute(command[2].format(f'room{room_number}'),
                                       [get_role_state(next_role), next_role])  # update next_role state

                        cursor.execute(command[3].format(f'room{room_number}'),
                                       [next_role])  # select userid by user_role
                        next_role_id = cursor.fetchone()[0]

                        break
                    else:
                        role = next_role

            players = get_user_buttons_and_list()  # 0 players, 1 players_buttons, 2 players_list

            message = f"{get_message_for_role(next_role)}\n{players[2]}"

            if values[1] in ['–ö–æ–º–∏—Å—Å–∞—Ä', '–°–µ—Ä–∂–∞–Ω—Ç']:
                cursor.execute(command[6].format(f'room{room_number}'),
                               [next((n for n in players[0] if n[-1] == values[2]))])
                if cursor.fetchone()[0] == 1:
                    send_message_to_user(values[0], "üëç –≠—Ç–æ —Ö–æ—Ä–æ—à–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂!")
                else:
                    send_message_to_user(values[0], "üëé –≠—Ç–æ –ø–ª–æ—Ö–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂!")

                # send message to chat about player's turns
                send_message_to_chat(room_number, messages_to_group_while_actions(next_role))

                connection_data.close()
                return {True: [next_role_id, message, players[1]]}
            else:

                # send message to chat about player's turns
                send_message_to_chat(room_number, messages_to_group_while_actions(next_role))

                connection_data.close()
                return {True: [next_role_id, message, players[1]]}

        except:

            fn_ids = lambda column: (
            (cursor.execute(command[7].format(f"userid", f'room{room_number}', column)), cursor.fetchone()[0])[1])
            fn_roles = lambda column: (
            (cursor.execute(command[7].format(f"user_role", f'room{room_number}', column)), cursor.fetchone()[0])[1])

            roles = []
            ids = []

            for column in ["mafia_choice", "hoe_choice", "doctor_choice", "bodyguard_choice"]:
                try:  # try to append chosen roles, ids
                    roles.append(fn_roles(column))
                    ids.append(fn_ids(column))
                except:  # if it's not possible add blank role and id
                    roles.append('–ú–µ—Ä—Ç–≤–µ—Ü')
                    ids.append(-1)
                    pass

            cursor.execute(command[18].format("game_day", "rooms", "room"), [room_number])
            day_number = cursor.fetchone()[0]

            log = f"üñä –î–µ–Ω—å {day_number}: "

            try:  # if don is alive
                cursor.execute(command[8].format(f'room{room_number}', f'user_role'), ['–î–æ–Ω'])
                if cursor.fetchone()[0] == 1:  # don is alive
                    if roles[0] == '–î–æ–Ω':
                        log += '–î–æ–Ω –≤—ã–±–∏—Ä–∞–µ—Ç —Å–µ–±—è.\n'
                        death = False  # don had chosen himself

                    elif roles[0] == '–ü—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫–∞':  # don kills hoe
                        log += '–î–æ–Ω –ø–æ–∫—É—à–∞–µ—Ç—Å—è –Ω–∞ –ü—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫—É: '
                        if roles[2] != '–ü—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫–∞':  # doctor didn't chose hoe
                            if roles[3] != '–ü—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫–∞':  # bodyguard didn't choose hoe
                                if roles[1] != roles[2]:  # if doctor didn't choose the same guy as hoe
                                    if roles[1] != roles[3]:  # if bodyguard didn't choose the same guy as hoe
                                        log += f"–ø–æ–∫—É—à–µ–Ω–∏–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –±–æ–ª–µ–µ —á–µ–º —É—Å–ø–µ—à–Ω–æ, –ü—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫–∞ —É–º–∏—Ä–∞–µ—Ç, –∏, –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å, –∑–∞–±–∏—Ä–∞–µ—Ç —Å–≤–æ–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ ({role_word_form(roles[1])}).\n"
                                        cursor.execute(command[9].format(f'room{room_number}', f'user_role'),
                                                       [0, '–ü—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫–∞'])  # is_alive = 0 hoe
                                        cursor.execute(command[9].format(f'room{room_number}', f'userid'),
                                                       [0, ids[1]])  # is_alive = 0 hoe's choice
                                        death = True
                                    else:
                                        log += f"–ø–æ–∫—É—à–µ–Ω–∏–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –±–æ–ª–µ–µ —á–µ–º —É—Å–ø–µ—à–Ω–æ, –ü—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫–∞ —É–º–∏—Ä–∞–µ—Ç, –æ–¥–Ω–∞–∫–æ –¢–µ–ª–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å —Å–ø–∞—Å–∞–µ—Ç –∂–∏–∑–Ω—å –µ–µ –∫–ª–∏–µ–Ω—Ç—É ({role_word_form(roles[1])}).\n"
                                        cursor.execute(command[9].format(f'room{room_number}', f'user_role'),
                                                       [0, '–ü—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫–∞'])  # is_alive = 0 hoe
                                        cursor.execute(command[9].format(f'room{room_number}', f'user_role'),
                                                       [0, '–¢–µ–ª–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å'])  # is_alive = 0 bodyguard
                                        death = True
                                else:
                                    log += f"–ø–æ–∫—É—à—á–µ–Ω–∏–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç —É—Å–ø–µ—à–Ω–æ, –ü—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫–∞ —É–º–∏—Ä–∞–µ—Ç, –æ–¥–Ω–∞–∫–æ –î–æ–∫—Ç–æ—Ä —Å–ø–∞—Å–∞–µ—Ç –µ–µ –∫–ª–∏–µ–Ω—Ç–∞ ({role_word_form(roles[1])}).\n"
                                    cursor.execute(command[9].format(f'room{room_number}', f'user_role'),
                                                   [0, '–ü—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫–∞'])  # is_alive = 0 hoe and her choice is alive
                                    death = True
                            else:
                                log += "–ø–æ–∫—É—à–µ–Ω–∏–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ –ø–ª–∞–Ω—É, –¢–µ–ª–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å —Å–ø–∞—Å–∞–µ—Ç –ü—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫—É, –æ–¥–Ω–∞–∫–æ —É–º–∏—Ä–∞–µ—Ç —Å–∞–º.\n"
                                cursor.execute(command[9].format(f'room{room_number}', f'user_role'),
                                               [0, '–¢–µ–ª–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å'])  # is_alive = 0 bodyguard but hoe is alive
                                death = True
                        else:
                            log += f"–ø–æ–∫—É—à–µ–Ω–∏–µ —Å—Ä—ã–≤–∞–µ—Ç—Å—è, –î–æ–∫—Ç–æ—Ä —Å–ø–∞—Å–∞–µ—Ç –ü—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫—É –∏ –µ–µ –∫–ª–∏–µ–Ω—Ç–∞ ({role_word_form(roles[1])}).\n"
                            death = False  # doctor saved hoe and her choice

                    elif roles[0] in ['–ú–∞—Ñ–∏—è', '–ö–æ–º–∏—Å—Å–∞—Ä', '–°–µ—Ä–∂–∞–Ω—Ç', "–î–æ–∫—Ç–æ—Ä", '–¢–µ–ª–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å', "–ú—Å—Ç–∏—Ç–µ–ª—å",
                                      "–°—É–∏—Ü–∏–¥–Ω–∏–∫", "–ú–∏—Ä–Ω—ã–π"]:  # don one of these guys
                        log += f"–î–æ–Ω –ø–æ–∫—É—à–∞–µ—Ç—Å—è –Ω–∞ {role_word_form(roles[0])}: "
                        if roles[1] != roles[0]:  # hoe didn't save
                            if roles[2] != roles[0]:  # doctor didn't save
                                if roles[0] == '–¢–µ–ª–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å':
                                    log += "–ø–æ–∫—É—à–µ–Ω–∏–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –ø–ª–∞–Ω—É, –î–æ–Ω —É–±–∏–≤–∞–µ—Ç —Å–≤–æ—é –∂–µ—Ä—Ç–≤—É.\n"
                                    cursor.execute(command[9].format(f'room{room_number}', f'user_role'),
                                                   [0, '–¢–µ–ª–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å'])  # is_alive = 0 bodyguard
                                    death = True
                                else:
                                    if roles[3] != roles[0]:  # bodyguard didn't save
                                        log += "–ø–æ–∫—É—à–µ–Ω–∏–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –ø–ª–∞–Ω—É, –î–æ–Ω —É–±–∏–≤–∞–µ—Ç —Å–≤–æ—é –∂–µ—Ä—Ç–≤—É.\n"
                                        cursor.execute(command[9].format(f'room{room_number}', f'user_role'),
                                                       [0, roles[0]])  # set is_alive = 0 where user_role == 0
                                        death = True
                                    else:
                                        log += "–ø–æ–∫—É—à–µ–Ω–∏–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ –ø–ª–∞–Ω—É, –¢–µ–ª–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å —Å–ø–∞—Å–∞–µ—Ç –∂–µ—Ä—Ç–≤—É –ø–æ–∫—É—à–µ–Ω–∏—è, –æ–¥–Ω–∞–∫–æ —É–º–∏—Ä–∞–µ—Ç —Å–∞–º.\n"
                                        cursor.execute(command[9].format(f'room{room_number}', f'user_role'),
                                                       [0, '–¢–µ–ª–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å'])  # bodyguard saved but died himself
                                        death = True
                            else:
                                log += "–ø–æ–∫—É—à–µ–Ω–∏–µ —Å—Ä—ã–≤–∞–µ—Ç—Å—è, –î–æ–∫—Ç–æ—Ä —Å–ø–∞—Å–∞–µ—Ç –∂–µ—Ä—Ç–≤—É –ø–æ–∫—É—à–µ–Ω–∏—è.\n"
                                death = False  # doctor saved
                        else:
                            log += "–ø–æ–∫—É—à–µ–Ω–∏–µ —Å—Ä—ã–≤–∞–µ—Ç—Å—è, –ü—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫–∞ —Å–ø–∞—Å–∞–µ—Ç –∂–µ—Ä—Ç–≤—É –ø–æ–∫—É—à–µ–Ω–∏—è.\n"
                            death = False  # hoe saved

            except:  # don is dead
                if roles[0] == '–ú–∞—Ñ–∏—è':  # mafia chose itself
                    log += '–ú–∞—Ñ–∏—è –≤—ã–±–∏—Ä–∞–µ—Ç —Å–µ–±—è.\n'
                    death = False # nobody died

                elif roles[0] == '–ü—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫–∞':  # don kills hoe
                    log += '–ú–∞—Ñ–∏—è –ø–æ–∫—É—à–∞–µ—Ç—Å—è –Ω–∞ –ü—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫—É: '
                    if roles[2] != '–ü—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫–∞':  # doctor didn't chose hoe
                        if roles[3] != '–ü—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫–∞':  # bodyguard didn't choose hoe #??????
                            if roles[1] != roles[2]:  # if not doctor didn't choose the same guy as hoe
                                if roles[1] != roles[3]:  # if not bodyguard didn't choose the same guy as hoe
                                    log += f"–ø–æ–∫—É—à–µ–Ω–∏–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –±–æ–ª–µ–µ —á–µ–º —É—Å–ø–µ—à–Ω–æ, –ü—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫–∞ —É–º–∏—Ä–∞–µ—Ç, –∏, –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å, –∑–∞–±–∏—Ä–∞–µ—Ç —Å–≤–æ–µ–≥–æ –∫–ª–∏–∞–µ–Ω—Ç–∞ ({role_word_form(roles[1])}).\n"
                                    cursor.execute(command[9].format(f'room{room_number}', f'user_role'),
                                                   [0, '–ü—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫–∞'])  # is_alive = 0 hoe
                                    cursor.execute(command[9].format(f'room{room_number}', f'userid'),
                                                   [0, ids[1]])  # is_alive = 0 hoe's choice
                                    death = True
                                else:
                                    log += f"–ø–æ–∫—É—à–µ–Ω–∏–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –±–æ–ª–µ–µ —á–µ–º —É—Å–ø–µ—à–Ω–æ, –ü—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫–∞ —É–º–∏—Ä–∞–µ—Ç, –æ–¥–Ω–∞–∫–æ –¢–µ–ª–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å —Å–ø–∞—Å–∞–µ—Ç –∂–∏–∑–Ω—å –µ–µ –∫–ª–∏–µ–Ω—Ç—É ({role_word_form(roles[1])}).\n"
                                    cursor.execute(command[9].format(f'room{room_number}', f'user_role'),
                                                   [0, '–ü—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫–∞'])  # is_alive = 0 hoe
                                    cursor.execute(command[9].format(f'room{room_number}', f'user_role'),
                                                   [0, '–¢–µ–ª–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å'])  # is_alive = 0 bodyguard
                                    death = True
                            else:
                                log += f"–ø–æ–∫—É—à—á–µ–Ω–∏–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç —É—Å–ø–µ—à–Ω–æ, –ü—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫–∞ —É–º–∏—Ä–∞–µ—Ç, –æ–¥–Ω–∞–∫–æ –î–æ–∫—Ç–æ—Ä —Å–ø–∞—Å–∞–µ—Ç –µ–µ –∫–ª–∏–µ–Ω—Ç–∞ ({role_word_form(roles[1])}).\n"
                                cursor.execute(command[9].format(f'room{room_number}', f'user_role'),
                                               [0, '–ü—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫–∞'])  # is_alive = 0 hoe and her choice is alive
                                death = True
                        else:
                            log += "–ø–æ–∫—É—à–µ–Ω–∏–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ –ø–ª–∞–Ω—É, –¢–µ–ª–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å —Å–ø–∞—Å–∞–µ—Ç –ü—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫—É, –æ–¥–Ω–∞–∫–æ —É–º–∏—Ä–∞–µ—Ç —Å–∞–º.\n"
                            cursor.execute(command[9].format(f'room{room_number}', f'user_role'),
                                           [0, '–¢–µ–ª–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å'])  # is_alive = 0 bodyguard but hoe is alive
                            death = True
                    else:
                        log += f"–ø–æ–∫—É—à–µ–Ω–∏–µ —Å—Ä—ã–≤–∞–µ—Ç—Å—è, –î–æ–∫—Ç–æ—Ä —Å–ø–∞—Å–∞–µ—Ç –ü—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫—É –∏ –µ–µ –∫–ª–∏–µ–Ω—Ç–∞ ({role_word_form(roles[1])}).\n"
                        death = False  # doctor saved hoe and her choice

                elif roles[0] in ['–ö–æ–º–∏—Å—Å–∞—Ä', '–°–µ—Ä–∂–∞–Ω—Ç', "–î–æ–∫—Ç–æ—Ä", '–¢–µ–ª–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å', "–ú—Å—Ç–∏—Ç–µ–ª—å", "–°—É–∏—Ü–∏–¥–Ω–∏–∫",
                                  "–ú–∏—Ä–Ω—ã–π"]:  # don one of these guys
                    log += f"–ú–∞—Ñ–∏—è –ø–æ–∫—É—à–∞–µ—Ç—Å—è –Ω–∞ {role_word_form(roles[0])}: "
                    if roles[1] != roles[0]:  # hoe didn't save
                        if roles[2] != roles[0]:  # doctor didn't save
                            if roles[0] == '–¢–µ–ª–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å':
                                log += "–ø–æ–∫—É—à–µ–Ω–∏–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –ø–ª–∞–Ω—É, –ú–∞—Ñ–∏—è —É–±–∏–≤–∞–µ—Ç —Å–≤–æ—é –∂–µ—Ä—Ç–≤—É.\n"
                                cursor.execute(command[9].format(f'room{room_number}', f'user_role'),
                                               [0, '–¢–µ–ª–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å'])  # is_alive = 0 bodyguard
                                death = True
                            else:
                                log += "–ø–æ–∫—É—à–µ–Ω–∏–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –ø–ª–∞–Ω—É, –ú–∞—Ñ–∏—è —É–±–∏–≤–∞–µ—Ç —Å–≤–æ—é –∂–µ—Ä—Ç–≤—É.\n"
                                if roles[3] != roles[0]:  # bodyguard didn't save
                                    cursor.execute(command[9].format(f'room{room_number}', f'user_role'), [0, roles[0]])
                                    death = True
                                else:
                                    log += "–ø–æ–∫—É—à–µ–Ω–∏–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ –ø–ª–∞–Ω—É, –¢–µ–ª–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å —Å–ø–∞—Å–∞–µ—Ç –∂–µ—Ä—Ç–≤—É –ø–æ–∫—É—à–µ–Ω–∏—è, –æ–¥–Ω–∞–∫–æ —É–º–∏—Ä–∞–µ—Ç —Å–∞–º.\n"
                                    cursor.execute(command[9].format(f'room{room_number}', f'user_role'),
                                                   [0, '–¢–µ–ª–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å'])  # bodyguard saved but died himself
                                    death = True
                        else:
                            log += "–ø–æ–∫—É—à–µ–Ω–∏–µ —Å—Ä—ã–≤–∞–µ—Ç—Å—è, –î–æ–∫—Ç–æ—Ä —Å–ø–∞—Å–∞–µ—Ç –∂–µ—Ä—Ç–≤—É –ø–æ–∫—É—à–µ–Ω–∏—è.\n"
                            death = False  # doctor saved
                    else:
                        log += "–ø–æ–∫—É—à–µ–Ω–∏–µ —Å—Ä—ã–≤–∞–µ—Ç—Å—è, –ü—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫–∞ —Å–ø–∞—Å–∞–µ—Ç –∂–µ—Ä—Ç–≤—É –ø–æ–∫—É—à–µ–Ω–∏—è.\n"
                        death = False  # hoe saved

            cursor.execute(command[18].format("actions_history", "rooms", "room"), [room_number]) # select previous records of actions_history
            history = cursor.fetchone()[0]
            if history is None:
                history = ""
            history += log # add current log to the history

            cursor.execute(command[19].format("rooms", "actions_history", "room"), [history, room_number]) # update actions_history

            fn_set_last_poll_deadline = lambda timestamp, room: (
                cursor.execute(command[17].format("rooms", f"poll_deadline", 'room'),
                               [timestamp, room]))  # function that sets poll deadline

            if death is False:  # nobody died

                players = get_user_buttons_and_list()  # 0 players, 1 players_buttons, 2 players_list

                send_message_with_keyboard_to_chat(room_number, f'üîä –°–µ–≥–æ–¥–Ω—è –Ω–æ—á—å—é –Ω–∏–∫—Ç–æ –Ω–µ —É–º–µ—Ä!\n'
                                                                f'üëÄ –£ –∫–æ–≥–æ –µ—Å—Ç—å –∫–∞–∫–∏–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è? –ù–∞–ø–æ–º–∏–Ω–∞—é –∫—Ç–æ –µ—â–µ –≤ –∏–≥—Ä–µ:\n'
                                                                f'{players[2]}'
                                                                f'‚ùó –ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –ª–∏—à—å –æ–¥–∏–Ω —Ä–∞–∑ –±–µ–∑ –ø—Ä–∞–≤–∞ —Å–º–µ–Ω—ã –≥–æ–ª–æ—Å–∞, –ø–æ—ç—Ç–æ–º—É —Å–Ω–∞—á–∞–ª–∞ –æ–±—Å—É–¥–∏—Ç–µ —ç—Ç–æ –≤ —á–∞—Ç–µ!\n'
                                                                f'ü§° –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ –ø—Ä–∏–∫–æ–ª—É —Å–ª—É—á–∞–π–Ω–æ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å - –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Å–º–∞–π–ª–∏–∫ (—É—Å–Ω—É—Ç—å —Å–ª—É—á–∞–π–Ω–æ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è).\n'
                                                                f'‚åõ –£ –≤–∞—Å –µ—Å—Ç—å –æ–¥–Ω–∞ –º–∏–Ω—É—Ç–∞ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è!',
                                                   users_keyboard(players[1], 0))

                cursor.execute(
                    command[12].format(f'room{room_number}'))  # set all alive users to 88 state for recieving votes

                # set poll's deadline
                fn_set_last_poll_deadline(get_current_time(60).strftime("%d-%m-%Y %H:%M:%S"), room_number)

            elif death is True:  # somebody dead

                cursor.execute(
                    command[10].format(f'room{room_number}'))  # select username, userid, user_role who are dead
                dead = [d for d in cursor.fetchall()]  # 0 - username, 1 - userid, 2 - user_role

                if len(dead) == 2:
                    message_dead = f'üíÄ –°–µ–≥–æ–¥–Ω—è –Ω–æ—á—å—é –ø—Ä–æ–∏–∑–æ—à–ª–æ –¥–≤–æ–π–Ω–æ–µ —É–±–∏–π—Å—Ç–≤–æ! \nüò® –ë—ã–ª–∏ —É–±–∏—Ç—ã: '
                    for i, d in enumerate(dead):
                        if i == 0:
                            d1 = d
                        else:
                            d2 = d
                    message_dead += f'{d1[0]} ({d1[2]}) –∏ {d2[0]} ({d2[2]}).\n'
                else:
                    message_dead = f'üíÄ –°–µ–≥–æ–¥–Ω—è –Ω–æ—á—å—é —É–±–∏–ª–∏ {dead[0][0]} ({dead[0][2]}).\n'

                fn_reset_room = lambda lst: [cursor.execute(command[11], [d[1]]) for d in
                                             lst]  # clear room for dead guys from all_users table
                fn_set_alive_state_null = lambda lst: [cursor.execute(command[16].format(f'room{room_number}'), [d[1]])
                                                       for d in lst]  # set dead guys 'is_alive', 'user_state' to NULL

                for i, d in enumerate(dead):
                    if d[2] == '–ú—Å—Ç–∏—Ç–µ–ª—å':
                        revenger_id = dead[i][1]

                        if len(dead) == 1:
                            send_message_to_chat(room_number,
                                                 f"{message_dead}üëä –ú—Å—Ç–∏—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç, –∫–æ–≥–æ —Å–µ–π—á–∞—Å –æ–Ω –∑–∞–±–µ—Ä–µ—Ç —Å —Å–æ–±–æ–π –Ω–∞ —Ç–æ—Ç —Å–≤–µ—Ç!")
                        else:
                            send_message_to_chat(room_number,
                                                 f"{message_dead}üëä –°—Ä–µ–¥–∏ —É–±–∏—Ç—ã—Ö –æ–∫–∞–∑–∞–ª—Å—è –ú—Å—Ç–∏—Ç–µ–ª—å, –ø–æ—ç—Ç–æ–º—É —Å–µ–π—á–∞—Å –æ–Ω –≤—ã–±–µ—Ä–µ—Ç, –∫–æ–≥–æ –∑–∞–±–µ—Ä–µ—Ç —Å —Å–æ–±–æ–π –Ω–∞ —Ç–æ—Ç —Å–≤–µ—Ç!")

                        cursor.execute(command[2].format(f"room{room_number}"),
                                       [10, '–ú—Å—Ç–∏—Ç–µ–ª—å'])  # set revenger to 10 state
                        cursor.execute(command[9].format(f"room{room_number}", "user_role"), [1,
                                                                                              '–ú—Å—Ç–∏—Ç–µ–ª—å'])  # set revenger is_alive to 1 so he can choose himself later for not killing anyone with him

                        del dead[i]

                        fn_reset_room(dead)  # clear room for dead guys from all_users table
                        fn_set_alive_state_null(dead)  # set dead guys 'is_alive', 'user_state' to NULL

                        players = get_user_buttons_and_list()  # 0 players, 1 players_buttons, 2 players_list

                        send_message_to_user_keyboard(revenger_id,
                                                      f"üëä –í—ã–±–∏—Ä–∞–π –∫–æ–≥–æ —Å–µ–π—á–∞—Å —Ç—ã –∑–∞–±–µ—Ä–µ—à—å —Å —Å–æ–±–æ–π –≤ –º–æ–≥–∏–ª—É!\n{players[2]}üò∂ –í—ã–±–µ—Ä–∏ —Å–µ–±—è –µ—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å –Ω–∏–∫–æ–≥–æ –∑–∞–±–∏—Ä–∞—Ç—å.",
                                                      users_keyboard(players[1], 1))

                        # Give revenger 15 seconds to think
                        fn_set_last_role_deadline = lambda role, room, timestamp: (
                            cursor.execute(command[17].format("rooms", f"last_role", 'room'), [role, room]),
                            cursor.execute(command[17].format("rooms", f"action_deadline", 'room'),
                                           [timestamp, room]))  # set role's deadline
                        fn_set_last_role_deadline('–ú—Å—Ç–∏—Ç–µ–ª—å', room_number,
                                                  get_current_time(15).strftime("%d-%m-%Y %H:%M:%S"))

                        return None

                fn_reset_room(dead)  # clear room for dead guys from all_users table
                fn_set_alive_state_null(dead)  # set dead guys 'is_alive', 'user_state' to NULL

                fn = lambda: \
                (cursor.execute(command[13].format(f'room{room_number}')), [r[0] for r in cursor.fetchall()])[
                    1]  # get alive roles
                roles = fn()

                if len(roles) > 2:  # does it make sense to continue the game?
                    if '–î–æ–Ω' in roles or '–ú–∞—Ñ–∏—è' in roles:  # continue the game
                        players = get_user_buttons_and_list()  # 0 players, 1 players_buttons, 2 players_list

                        send_message_with_keyboard_to_chat(room_number,
                                                           f'{message_dead}'  # need to replace that
                                                           f'üëÄ –£ –∫–æ–≥–æ –µ—Å—Ç—å –∫–∞–∫–∏–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è? –ù–∞–ø–æ–º–∏–Ω–∞—é –∫—Ç–æ –µ—â–µ –≤ –∏–≥—Ä–µ:\n'
                                                           f'{players[2]}'
                                                           f'‚ùó –ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –ª–∏—à—å –æ–¥–∏–Ω —Ä–∞–∑, –ø–æ—ç—Ç–æ–º—É —Å–Ω–∞—á–∞–ª–∞ –æ–±—Å—É–¥–∏—Ç–µ —ç—Ç–æ –≤ —á–∞—Ç–µ!\n'
                                                           f'ü§° –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ –ø—Ä–∏–∫–æ–ª—É —Å–ª—É—á–∞–π–Ω–æ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å - –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Å–º–∞–π–ª–∏–∫ (–£—Å–Ω—É—Ç—å —Å–ª—É—á–∞–π–Ω–æ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è).\n'
                                                           f'‚åõ –£ –≤–∞—Å –µ—Å—Ç—å –æ–¥–Ω–∞ –º–∏–Ω—É—Ç–∞ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è!',
                                                           users_keyboard(players[1], 0))

                        cursor.execute(command[12].format(
                            f'room{room_number}'))  # set all alive users to 88 state for recieving votes

                        # set poll's deadline
                        fn_set_last_poll_deadline(get_current_time(60).strftime("%d-%m-%Y %H:%M:%S"), room_number)

                        connection_data.close()
                        return None

                    else:  # mafia lost the game
                        send_message_to_chat(room_number,
                                             f"{message_dead}\nü•≥ –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –º–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏ –≤—ã–∏–≥—Ä—ã–≤–∞—é—Ç —ç—Ç—É –∏–≥—Ä—É!")
                else:
                    if '–î–æ–Ω' in roles or '–ú–∞—Ñ–∏—è' in roles:  # mafia won the game
                        send_message_to_chat(room_number, f"{message_dead}\nüòà –¢–µ–º —Å–∞–º—ã–º –ú–∞—Ñ–∏—è –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç —ç—Ç—É –∏–≥—Ä—É!")
                    else:  # mafia lost the game
                        send_message_to_chat(room_number,
                                             f"{message_dead}\nü•≥ –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –º–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏ –≤—ã–∏–≥—Ä—ã–≤–∞—é—Ç —ç—Ç—É –∏–≥—Ä—É!")

                send_message_to_chat(room_number, history) # send message to the chat about the game choices
                cursor.execute(command[20], [room_number]) # delete row about game in rooms table
                fn = lambda: (cursor.execute(command[14].format(f"room{room_number}")), cursor.fetchall())[1]  # select all alive players
                fn_reset_room(fn())  # clear room column in all_users for them
                cursor.execute(command[15].format(f"room{room_number}"))  # delete table